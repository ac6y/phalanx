---
apiVersion: serving.knative.dev/v1
kind: Service
metadata:
  name: {{ include "prompt-proto-service.fullname" . }}
spec:
  template:
    metadata:
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
    spec:
      containerConcurrency: {{ .Values.containerConcurrency }}
      initContainers:
      - name: init-pgpass
        # Make a copy of the read-only secret that's owned by lsst
        # lsst account is created by main image with id 1000
        image: busybox
        command: ["sh", "-c", "cp -L /app/pg-mount/.pgpass /app/pgsql/ && chown 1000:1000 /app/pgsql/.pgpass && chmod u=r,go-rwx /app/pgsql/.pgpass"]
        volumeMounts:
        - mountPath: /app/pg-mount
          name: pgpass-mount
          readOnly: true
        - mountPath: /app/pgsql
          name: pgpass-credentials-file
      containers:
      - image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
        imagePullPolicy: {{ .Values.image.pullPolicy | quote }}
        name: user-container
        env:
        - name: RUBIN_INSTRUMENT
          value: {{ .Values.instrument.name }}
        - name: PIPELINES_CONFIG
          value: {{ .Values.instrument.pipelines }}
        - name: SKYMAP
          value: {{ .Values.instrument.skymap }}
        - name: IMAGE_BUCKET
          value: {{ .Values.s3.imageBucket }}
        - name: BUCKET_TOPIC
          value: {{ .Values.imageNotifications.topic }}
        - name: IMAGE_TIMEOUT
          value: {{ .Values.imageNotifications.imageTimeout | quote }}
        - name: PGUSER
          value: {{ .Values.instrument.calibRepoPguser }}
        - name: CALIB_REPO
          value: {{ .Values.instrument.calibRepo }}
        - name: LSST_DISABLE_BUCKET_VALIDATION
          value: {{ .Values.s3.disableBucketValidation | quote }}
        - name: URL_APDB
          value: {{ .Values.apdb.url }}
        - name: NAMESPACE_APDB
          value: {{ .Values.apdb.namespace }}
        - name: KAFKA_CLUSTER
          value: {{ .Values.imageNotifications.kafkaClusterAddress }}
        - name: SASQUATCH_URL
          value: {{ .Values.sasquatch.endpointUrl }}
        {{- if and .Values.sasquatch.endpointUrl .Values.sasquatch.auth_env }}
        - name: SASQUATCH_TOKEN
          valueFrom:
            secretKeyRef:
              name: {{ template "prompt-proto-service.fullname" . }}-secret
              key: sasquatch_token
        {{- end }}
        - name: DAF_BUTLER_SASQUATCH_NAMESPACE
          value: {{ .Values.sasquatch.namespace }}
        - name: S3_ENDPOINT_URL
          value: {{ .Values.s3.endpointUrl }}
        {{- if .Values.s3.auth_env }}
        - name: AWS_ACCESS_KEY_ID
          valueFrom:
            secretKeyRef:
              name: {{ template "prompt-proto-service.fullname" . }}-secret
              key: s3_access_key
        - name: AWS_SECRET_ACCESS_KEY
          valueFrom:
            secretKeyRef:
              name: {{ template "prompt-proto-service.fullname" . }}-secret
              key: s3_secret_key
        {{- end }}
        {{- if .Values.s3.cred_file_auth }}
        - name: AWS_SHARED_CREDENTIALS_FILE
          value: /app/s3/credentials
        {{- end }}
        - name: PGPASSFILE
          value: /app/pgsql/.pgpass
        - name: AP_KAFKA_PRODUCER_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ template "prompt-proto-service.fullname" . }}-secret
              key: alert_stream_pass
        - name: AP_KAFKA_PRODUCER_USERNAME
          value: {{ .Values.alerts.username}}
        - name: AP_KAFKA_SERVER
          value: {{ .Values.alerts.server}}
        - name: AP_KAFKA_TOPIC
          value: {{ .Values.alerts.topic}}
        - name: LOCAL_REPOS
          value: "/tmp-butler"
        - name: SERVICE_LOG_LEVELS
          value: {{ .Values.logLevel }}
        - name: DEBUG_CACHE_CALIBS
          value: {{ if .Values.cacheCalibs }}'1'{{ else }}'0'{{ end }}
        volumeMounts:
        - mountPath: /tmp-butler
          name: ephemeral
        - mountPath: /app/pgsql
          name: pgpass-credentials-file
          readOnly: true
        {{- if .Values.s3.cred_file_auth }}
        - mountPath: /app/s3/
          name: s3-credentials-file
        {{- end }}
        {{- if .Values.registry.centralRepoFile }}
        - mountPath: {{ .Values.instrument.calibRepo }}
          name: central-repo-file
        {{- end }}
        {{- with .Values.additionalVolumeMounts }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
        readinessProbe:
          successThreshold: 1
          tcpSocket:
            port: 0
        resources:
          requests:
            cpu: {{ .Values.knative.cpuRequest }}
            ephemeral-storage: {{ .Values.knative.ephemeralStorageRequest }}
            memory: {{ .Values.knative.memoryRequest }}
          limits:
            cpu: {{ .Values.knative.cpuLimit }}
            ephemeral-storage: {{ .Values.knative.ephemeralStorageLimit }}
            memory: {{ .Values.knative.memoryLimit }}
            {{- if .Values.knative.gpu }}
            nvidia.com/gpu: {{ .Values.knative.gpuRequest }}
            {{- end }}
      volumes:
      - name: ephemeral
        emptyDir:
          sizeLimit: {{ .Values.knative.ephemeralStorageLimit }}
      - name: pgpass-mount
        # Temporary mount for .pgpass; cannot be read directly because it's owned by root
        secret:
          secretName: {{ template "prompt-proto-service.fullname" . }}-secret
          items:
          - key: pgpass_file
            path: .pgpass
          defaultMode: 0400  # Minimal permissions, as extra protection
      - name: pgpass-credentials-file
        emptyDir:
          sizeLimit: 10Ki  # Just a text file!
      {{- if .Values.s3.cred_file_auth }}
      - name: s3-credentials-file
        secret:
          secretName: {{ template "prompt-proto-service.fullname" . }}-secret
          key: s3-credentials-file
      {{- end }}
      {{- if .Values.registry.centralRepoFile }}
      - name: central-repo-file
        secret:
          secretName: {{ template "prompt-proto-service.fullname" . }}-secret
          items:
          - key: central_repo_file
            path: butler.yaml
      {{- end }}
      {{- if .Values.knative.gpu }}
      tolerations:
      - effect: NoSchedule
        key: nvidia.com/gpu
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      enableServiceLinks: false
      timeoutSeconds: {{ .Values.knative.timeout }}
      idleTimeoutSeconds: {{ .Values.knative.idleTimeout }}
      responseStartTimeoutSeconds: {{ .Values.knative.responseStartTimeout }}
