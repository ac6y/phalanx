# Default values for rubintv.

# -- Override the base name for resources
nameOverride: ""

# -- Override the full name for resources (includes the release name)
fullnameOverride: ""

# -- A special tag for letting the scripts know where they are
# running.  Must be overridden at each site
siteTag: ""

frontend:
  # -- If set to true, enable more verbose logging.
  debug: false
  # -- Prefix for rubintv's frontend API routes.
  pathPrefix: "/rubintv"
  # -- Settings for rubintv OCI image
  image:
    # -- rubintv frontend image to use
    repository: "ghcr.io/lsst-sqre/rubintv"
    # -- Pull policy for the rubintv image
    pullPolicy: "IfNotPresent"
    # -- Tag of rubintv image to use
    # @default -- The appVersion of the chart
    tag: ""
  # -- Resource limits and requests for the rubintv frontend pod
  resources: {}
  # -- Annotations for the rubintv frontend pod
  podAnnotations: {}
  # -- Node selector rules for the rubintv frontend pod
  nodeSelector: {}
  # -- Tolerations for the rubintv frontend pod
  tolerations: []
  # -- Affinity rules for the rubintv frontend pod
  affinity: {}

workers:
  # -- how many replicas to use
  replicas: 5
  # -- If set to true, enable more verbose logging.
  debug: false
  # -- Prefix for the (internal) worker API routes
  pathPrefix: "/"
  # -- UID to run as (site-dependent, because of filesystem perms)
  uid: 1000
  # -- GID to run as
  gid: 1000
  # We will try to avoid fsid; just use uid.  Might need to change that.
  # -- Settings for OCI image for worker pods
  image:
    # -- The Docker registry name for the container image.
    repository: ts-dockerhub.lsst.org/rubintv-broadcaster
    # -- The tag of the container image to use.
    tag: develop
    # -- The policy to apply when pulling an image for deployment.
    pullPolicy: IfNotPresent
  # -- Script that runs in RUN_ARG.  This needs to be replaced with
  # something less scary
  script: slac/rubintv/workerPod1.py
  # -- This section holds a list of key, value pairs for environmental
  # variables (name: key, value: value).
  # NOTE: RUN_ARG is taken care of by the chart using _script_.
  env: []
  # -- This section holds specifications for secret injection.
  # If this section is used, each object listed must have the following attributes defined:
  # _name_ (The label for the secret),
  # _secretName_ (The name of the vault store reference. Uses the _namespace_ attribute to construct the full name),
  # _secretKey_ (The key in the vault store containing the necessary secret)
  envSecrets: []
  # -- The Vault prefix path
  vaultPrefixPath: ""
  # The key for the pull secrets including any sub-paths.
  pullSecretsPath: ""
  # Path for the rubin tv specific secrets vault.  ** Let's just stuff
  # its contents into the Phalanx secrets
  # If this section is used, each object listed can have the following attributes defined:
  # _name_ (The label identifying the pull-secret to use)
  imagePullSecrets: []
  # -- This section allows for specification of Butler secret information.
  # If this section is used, it must contain the following attributes:
  # _key_ (The vault key for the Butler secret),
  # _containerPath_ (The directory location for the Butler secret),
  # _dbUser_ (The username for the Butler backend database)
  butlerSecret: {}
  # -- The key for the credentials including any sub-paths.
  credentialSecretsPath: ""
  # -- The name of the expected credential file for the broadcasters
  credentialFile: ""
  # -- Volumes for the rubintv worker pods
  # If this section is used, each list item must contain the following
  # attributes:
  # _name_ (the name of the volume)
  # _accessMode_ (ReadOnly, ReadWriteOnce, ReadWriteMany)
  # _mountPath_ (path mounted into the container)
  # and at least one of
  # _persistentVolumeClaim_ or _nfs_
  # _persistentVolumeClaim_ has fields
  # _name_ (the name of the PVC)
  # _storageClass_ (the storage class of the PVC)
  # _capacity_ (the size (as a string) of the PVC (e.g. "1Gi"))
  # _nfs_ is not yet implemented
  volumes: []
  # -- Resource limits and requests for the rubintv worker pods
  resources: {}
  # -- Annotations for the rubintv worker pods
  podAnnotations: {}
  # -- Node selector rules for the rubintv worker pods
  nodeSelector: {}
  # -- Tolerations for the rubintv worker pods
  tolerations: []
  # -- Affinity rules for the rubintv worker pods
  affinity: {}

ingress:
  # -- Additional annotations to add to the ingress
  annotations: {}

redis:
  config:
    # -- Name of secret containing Redis password (may require changing if
    # fullnameOverride is set)
    secretName: "rubintv-secret"

    # -- Key inside secret from which to get the Redis password (do not
    # change)
    secretKey: "redis-password"

  persistence:
    # -- Whether to persist Redis storage and thus tokens. Setting this to
    # false will use `emptyDir` and reset all tokens on every restart. Only
    # use this for a test deployment.
    enabled: true

    # -- Amount of persistent storage to request
    size: "1Gi"

    # -- Class of storage to request
    storageClass: ""

    # -- Access mode of storage to request
    accessMode: "ReadWriteOnce"

    # -- Use an existing PVC, not dynamic provisioning. If this is set, the
    # size, storageClass, and accessMode settings are ignored.
    volumeClaimName: ""

  # -- Resource limits and requests for the Redis pod
  # @default -- See `values.yaml`
  resources:
    limits:
      cpu: "1"
    requests:
      cpu: "100m"

  # -- Pod annotations for the Redis pod
  podAnnotations: {}

  # -- Node selection rules for the Redis pod
  nodeSelector: {}

  # -- Tolerations for the Redis pod
  tolerations: []

  # -- Affinity rules for the Redis pod
  affinity: {}


# The following will be set by parameters injected by Argo CD and should not
# be set in the individual environment values files.
global:
  # -- Base URL for the environment
  # @default -- Set by Argo CD
  baseUrl: ""

  # -- Host name for ingress
  # @default -- Set by Argo CD
  host: ""

  # -- Base path for Vault secrets
  # @default -- Set by Argo CD
  vaultSecretsPath: ""
